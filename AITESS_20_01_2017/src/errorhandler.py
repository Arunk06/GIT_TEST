# -*- coding: utf-8 -*-
#
# Package name		    : AITESS
# Module name		    : errorhandler
# File name		        : errorhandler.py
# Usage			        : Definitions of execeptions in AITESS.
# Authors		        : Hari Kiran K (Sc)
# Date of creation	    : N/A
#
# Modification history  :
#

"""The errorhandler module.

This module handles all errors encontered by AITESS. It defines different 
exception types and also provides error messages with information about 
filename as well as line number at which the error was encountered.
"""

import sys
import traceback


def GenerateExceptionMessage():
    exc_type, exc_obj, tb = sys.exc_info()
    tb_list = traceback.extract_tb(tb)
    return "Bug detected in file '%s' at line %d (%s), %s" % (tb_list[-1][0], tb_list[-1][1], tb_list[-1][3], exc_obj)


class Error(Exception):
    """The base class for Error handling.
    
    This class derived from Exception class is the base class 
    for all types of exceptions generated by AITESS.
    """

    def __init__(self, message, source_info):
        """The constructor.
        
        Initializes the message to be displayed, the name of the source which 
        produced the error and the line number in that source.
        """
        super(Error, self).__init__()
        self.message = str(message)
        self.source_info = source_info

    def __str__(self):
        """The formatted message.
        
        This method generates the formatted output message indicating the 
        type of the message.
        """
        return "General Error (%s): %s." % (self.source_info, self.message)


class EvaluationError(Error):
    """The class for handling parse errors.

    This class issues appropriate exception message for parse errors.
    """

    def __init__(self, message, source_info):
        """The constructor.

        It calls the base class constructor with the message to be displayed,
        the name of the source which produced the error and the line number
        in that source.
        """
        super(EvaluationError, self).__init__(message, source_info)

    def __str__(self):
        """The formatted message.

        This method generates the formatted output message indicating the
        type of the message.
        """
        return "Runtime Error (%s): %s." % (self.source_info, self.message)


class ParseError(Error):
    """The class for handling parse errors.
    
    This class issues appropriate exception message for parse errors.
    """

    def __init__(self, message, source_info):
        """The constructor.
        
        It calls the base class constructor with the message to be displayed, 
        the name of the source which produced the error and the line number 
        in that source.
        """
        super(ParseError, self).__init__(message, source_info)

    def __str__(self):
        """The formatted message.
        
        This method generates the formatted output message indicating the 
        type of the message.
        """
        return "Parse Error (%s): %s." % (self.source_info, self.message)


class ScanError(Error):
    """The class for handling scan errors.
    
    This class issues appropriate exception message for scan errors.
    """

    def __init__(self, message, source_info):
        """The constructor.
        
        It calls the base class constructor with the message to be displayed, 
        the name of the source which produced the error and the line number 
        in that source.
        """
        super(ScanError, self).__init__(message, source_info)

    def __str__(self):
        """The formatted message.
        
        This method generates the formatted output message indicating the 
        type of the message.
        """
        return "Scan Error (%s): %s." % (self.source_info, self.message)


class InputError(Error):
    """The class for handling input errors.
    
    This class issues appropriate exception message for input errors.
    """

    def __init__(self, message, source_info):
        """The constructor.
        
        It calls the base class constructor with the message to be displayed, 
        the name of the source which produced the error and the line number 
        in that source.
        """
        super(InputError, self).__init__(message, source_info)

    def __str__(self):
        """The formatted message.
        
        This method generates the formatted output message indicating the 
        type of the message.
        """
        return "Input Error (%s): %s." % (self.source_info, self.message)


class ExitError(Error):
    """The class for handling input errors.
    
    This class issues appropriate exception message for input errors.
    """

    def __init__(self, message, source_info):
        """The constructor.
        
        It calls the base class constructor with the message to be displayed, 
        the name of the source which produced the error and the line number 
        in that source.
        """
        super(ExitError, self).__init__(message, source_info)

    def __str__(self):
        """The formatted message.
        
        This method generates the formatted output message indicating the 
        type of the message.
        """
        return "Exit Warning (%s): %s." % (self.source_info, self.message)


class AssertError(Error):
    """The class for handling input errors.
    
    This class issues appropriate exception message for input errors.
    """

    def __init__(self, message, source_info):
        """The constructor.
        
        It calls the base class constructor with the message to be displayed, 
        the name of the source which produced the error and the line number 
        in that source.
        """
        super(AssertError, self).__init__(message, source_info)

    def __str__(self):
        """The formatted message.
        
        This method generates the formatted output message indicating the 
        type of the message.
        """
        return "Assert Error (%s): %s." % (self.source_info, self.message)


class UserExitError(Error):
    """The class for handling input errors.
    
    This class issues appropriate exception message for input errors.
    """

    def __init__(self, message, source_info):
        """The constructor.
        
        It calls the base class constructor with the message to be displayed, 
        the name of the source which produced the error and the line number 
        in that source.
        """
        super(UserExitError, self).__init__(message, source_info)

    def __str__(self):
        """The formatted message.
        
        This method generates the formatted output message indicating the 
        type of the message.
        """
        return "User Exit Error (%s): %s." % (self.source_info, self.message)
